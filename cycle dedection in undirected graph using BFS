 //cycle detection in a graph using bfs
 
 class solution{   
     private:   //declaring it private so that only can be acessed within the class
     
     bool detect(int src,vector<int> adj[],int vis[])
     {
         vis[src]=1;
         
         queue<pair<int,int>> q;
         
         q.push({src,-1});
         
         while(!q.empty())
         {
             int node=q.first();
             int parent=q.second();
             
             q.pop();
             
             for(auto it: adj[node])
             {
                 if(!vis[it])
                 {
                     vis[it]=1;
                     q.push({it,node});
                 }
                 else if(it!=parent)
                 {
                     return true;
                 }
             }
         }
         
         return false;
         
     }
     
     public:
     
     bool iscycle(int n,int adj[])
 {
     int vis[n]={0};
     
     for(int i=0;i<n;i++)
     {
         if(!vis[i])
         {
             if(detect(src,adj[],vis[])==true)
             {
                 return true;
             }
             
         }
     }
     
     return false;
 }
 
}
 
     
     
